class Person
{
protected:
    string name;
    int id;
public:
    Person(string n, int i) :name(n), id(i) {}
    virtual string getName() const = 0;
    virtual int getID() const = 0;
    virtual ~Person() {}
};

class Student : public Person {
    float previous_avg;
public:
    Student(string n, int i, float avg) :Person(n, i), previous_avg(avg) {}
    string getName() const override { return name; }
    int getID() const override { return id; }
    float getAvg() const { return previous_avg; }
    ~Student() {}
    void UpdateAvg(float avg) { previous_avg = avg; }
};


template <typename T>
class Question {
private:
    string text;
    T options[4];
    int correctIndex;
    string difficulty;
    string topic;
    int id;
public:
    Question():text(""),correctIndex(-1),difficulty(""),topic(""),id(0) {}
    Question(string t, T o[4], int c, string d, string to, int i)
        : text(t), correctIndex(c), difficulty(d), topic(to), id(i) {
        for (int i = 0; i < 4; i++) options[i] = o[i];
    }
    string getText() const { return text; }
    string getTopic() const { return topic; }
    int getID() const { return id; }
    T* getOptions() { return options; }
    int getIndex() const { return correctIndex; }
    string getDifficulty() const { return difficulty; }
    bool operator==(const Question& other) {
        if (text != other.text || correctIndex != other.correctIndex)
            return false;
        for (int i = 0; i < 4; i++) {
            if (options[i] != other.options[i])
                return false;
        }
        return true;
    }
    void display() const {
        cout << "Q. " << text << "?\n";
        for (int i = 0; i < 4; i++)
        {
            cout << i + 1 << ". " << options[i] << ".\n";
        }
    }
    ~Question() {}
};

